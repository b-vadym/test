#!/bin/sh

set -eu
. "$(dirname $0)/.shrc"


COMMAND="${1:-}"

case "$COMMAND" in
    "take"|"restore"|"drop"|"drop-all"|"list")
        # pass
    ;;
    *)
        echo "Missing/unknown command."
        echo "Usage:"
        echo "    $0 take [snapshot_name]"
        echo "        takes snapshot 'snapshot_name' by saving content of tables to the same database"
        echo "        if snapshot_name argument is not provided,"
        echo "        it will be generated automatically"
        echo "        snapshot_name will be echoed to stdout"
        echo ""
        echo "    $0 restore snapshot_name"
        echo "        restores snapshot 'snapshot_name'"
        echo ""
        echo "    $0 drop snapshot_db_name"
        echo "        drops snapshot 'snapshot_name'"
        echo ""
        echo "    $0 drop-all"
        echo "        drops all snapshots"
        echo ""
        echo "    $0 list"
        echo "        lists snapshots"
        echo ""
        exit 1
    ;;
esac

parse_database_url "$DATABASE_URL" "DB_"
DB_USER="${DB_USER:-}"
DB_PASS="${DB_PASS:-}"
DB_HOST="${DB_HOST:-}"
DB_PORT="${DB_PORT:-}"
DB_NAME="${DB_NAME:-}"

if [ -z "$DB_NAME" ]; then
    echo "Invalid configuration, missing database name" >&2
    exit 1
fi

MYSQL="$BIN_DIR/mysql-exec"
MYSQL_OPTIONS="$(get_switch "-u " "$DB_USER") $(get_switch "-h " "$DB_HOST") $(get_switch "-P " "$DB_PORT")"
SNAPSHOT_TABLES_PREFIX="${SNAPSHOT_TABLES_PREFIX:-zzzs_}"


echo_header() {
    echo "======= $@" >&2
}

echo_message() {
    echo " * $@" >&2
}

run_sql() {
    cat | MYSQL_PWD="$DB_PASS" "${MYSQL}" ${MYSQL_OPTIONS} "$@"
}

get_tables() {
    local db_name="$1"
    echo "SHOW TABLES" | run_sql "$db_name" | tail -n +2
}

snapshot_tables_prefix() {
    local snapshot_name="$1"
    echo "${SNAPSHOT_TABLES_PREFIX}${snapshot_name}_"
}

snapshot_name_from_table_name() {
    local table="$1"
    echo "$table" | sed -e "s#^${SNAPSHOT_TABLES_PREFIX}\([^_]\+\)_.*#\1#"
}

exec_take() {
    echo_header "Creating snapshot"

    local snapshot_name="${1:-}"

    if [ -z "$snapshot_name" ]; then
        snapshot_name_file="$(mktemp -t XXXXXX)"
        trap "rm -f '$snapshot_name_file'" HUP INT TERM EXIT
        snapshot_name="$(basename "$snapshot_name_file")"
    fi

    echo_message "Getting list of tables"
    local tables="$(get_tables "$DB_NAME")"

    echo_message "Building SQL query"
    local sql="SET foreign_key_checks = 0; SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';"
    local prefix="$(snapshot_tables_prefix "$snapshot_name")"

    for t in ${tables}; do
        if ! echo "$t" | grep -q "^$SNAPSHOT_TABLES_PREFIX"; then
            sql="${sql} DROP TABLE IF EXISTS \`${prefix}${t}\`;"
            sql="${sql} CREATE TABLE \`${prefix}${t}\` LIKE \`$t\`;"
            sql="${sql} INSERT INTO \`${prefix}${t}\` SELECT * FROM \`$t\`;"
        fi
    done

    echo_message "Running snapshot query"
    echo "$sql" | run_sql "$DB_NAME"
    echo_message "OK"

    echo "\n$snapshot_name"
}

exec_restore() {
    echo_header "Restoring snapshot"

    local snapshot_name="${1:-}"

    if [ -z "$snapshot_name" ]; then
        echo "Missing argument 'snapshot_name'" >&2
        exit 1
    fi

    echo_message "Getting list of tables"
    local tables="$(get_tables "$DB_NAME")"

    echo_message "Building SQL query"
    local sql="SET foreign_key_checks = 0; SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';"
    local prefix="$(snapshot_tables_prefix "$snapshot_name")"

    for t in ${tables}; do
        if echo "$t" | grep -q "^$SNAPSHOT_TABLES_PREFIX"; then
            continue
        fi

        sql="${sql} TRUNCATE TABLE \`${t}\`;"
        sql="${sql} INSERT INTO \`$t\` SELECT * FROM \`${prefix}${t}\`;"
    done

    echo_message "Running query"
    echo "$sql" | run_sql "$DB_NAME"
    echo_message "OK"
}

exec_drop() {
    local all="$1"
    local plural=""

    if [ "$all" = "y" ]; then
        plural="s"
    fi

    echo_header "Dropping snapshot${plural}"

    local snapshot_name="${2:-}"

    if [ "$all" != "y" -a -z "$snapshot_name" ]; then
        echo "Missing argument 'snapshot_name'" >&2
        exit 1
    fi

    echo_message "Getting list of tables"
    local tables="$(get_tables "$DB_NAME")"

    echo_message "Building SQL query"
    local sql="SET foreign_key_checks = 0; SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';"
    local prefix

    if [ "$all" = "y" ]; then
        prefix="$SNAPSHOT_TABLES_PREFIX"
    else
        prefix="$(snapshot_tables_prefix "$snapshot_name")"
    fi

    for t in ${tables}; do
        if echo "$t" | grep -q "^$prefix"; then
            sql="${sql} DROP TABLE IF EXISTS \`${t}\`;"
        fi
    done

    echo_message "Running query"
    echo "$sql" | run_sql "$DB_NAME"

    echo_message "OK"
}

exec_list() {
    echo_header "Listing snapshots"

    echo_message "Getting list of tables"
    local tables="$(get_tables "$DB_NAME")"

    echo_message "Building list of snapshots"
    local list=""

    for t in ${tables}; do
        if echo "$t" | grep -q "^$SNAPSHOT_TABLES_PREFIX"; then
            list="${list}\n$(snapshot_name_from_table_name "$t")"
        fi
    done

    echo_message "OK\n"

    echo "$list" | tail -n +2 | sort | uniq
}

if [ ! -z "$COMMAND" ]; then
    shift
fi

case "$COMMAND" in
    "take")
        exec_take "$@"
    ;;
    "restore")
        exec_restore "$@"
    ;;
    "drop")
        exec_drop "n" "$@"
    ;;
    "drop-all")
        exec_drop "y"
    ;;
    "list")
        exec_list
    ;;
esac
